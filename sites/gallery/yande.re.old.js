// Generated by CoffeeScript 1.6.2
var Shred, async, block, conn, fetch, mysql, shred, _,
  __slice = [].slice;

async = require('async');

Shred = require('shred');

shred = new Shred();

_ = require('underscore');

mysql = require('mysql');

block = require('node-block').block;

conn = mysql.createConnection('mysql://root:password@127.0.0.1:3306/moefou');

fetch = function(cur_page, conn, _cb) {
  return async.waterfall([
    function(cb) {
      return shred.get({
        url: 'https://yande.re/post.json',
        query: {
          limit: 30,
          page: cur_page
        },
        proxy: 'http://127.0.0.1:8888',
        on: {
          200: function(rep) {
            return cb(null, rep);
          },
          response: function(rep) {
            return cb(rep.status, rep);
          }
        }
      });
    }, function(rep, cb) {
      return async.map(rep.content.data, function(item, cb) {
        return async.waterfall([
          function(cb) {
            var sql;

            sql = 'SELECT `gallery_id` FROM `mp_gallery` WHERE `gallery_md5` = ?';
            return conn.query(sql, [item.md5], cb);
          }, function(result, q, cb) {
            var sql;

            if (result.length) {
              cb(null, false);
              return;
            }
            item.tags = item.tags.split(/\s/g);
            sql = 'INSERT INTO `mp_gallery`\n(`gallery_width`, `gallery_height`\n, `gallery_file_url`, `gallery_sample_url`, `gallery_preview_url`\n, `gallery_source`, `gallery_file_size`, `gallery_date`\n, `gallery_rating`, `gallery_md5`, `gallery_site`\n, `gallery_site_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)';
            return conn.query(sql, [item.width, item.height, item.file_url, item.sample_url, item.preview_url, item.source, item.file_size, Math.round(new Date().getTime() / 1000), item.rating, item.md5, 'imouto', item.id], function(err, q) {
              if ((q != null ? q.insertId : void 0) != null) {
                item.row_id = q.insertId;
              }
              return cb(err, item);
            });
          }
        ], cb);
      }, function(err, items) {
        var item, key, tag, tags, val, _i, _j, _len, _len1, _ref, _tags;

        items = _.compact(items);
        if (items.length === 0) {
          cb(null, {
            received: 30,
            collected: 0,
            tags: 0
          });
          return;
        }
        _tags = {};
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _ref = item.tags;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            tag = _ref[_j];
            if (_tags[tag] == null) {
              _tags[tag] = [];
            }
            _tags[tag].push(item.row_id);
          }
        }
        tags = (function() {
          var _results;

          _results = [];
          for (key in _tags) {
            val = _tags[key];
            _results.push({
              name: key,
              rows: val
            });
          }
          return _results;
        })();
        async.map(tags, function(tag, cb) {
          return async.waterfall([
            function(cb) {
              var sql;

              sql = 'SELECT `tag_id` FROM `mp_tags` WHERE  `tag_eng_name` = ?';
              return conn.query(sql, tag.name, cb);
            }, function() {
              var cb, q, result, sql, _k;

              result = arguments[0], q = 3 <= arguments.length ? __slice.call(arguments, 1, _k = arguments.length - 1) : (_k = 1, []), cb = arguments[_k++];
              if (result.length !== 0) {
                cb(null, result[0].tag_id);
                return;
              }
              sql = 'INSERT INTO `mp_tags` (`tag_chn_name`,`tag_eng_name`,`tag_jpn_name`,`tag_modified`) VALUES (?,?,?,?)';
              return conn.query(sql, ['', tag.name, '', Math.round(new Date().getTime() / 1000)], cb);
            }, function() {
              var cb, f, q, _k;

              q = arguments[0], f = 3 <= arguments.length ? __slice.call(arguments, 1, _k = arguments.length - 1) : (_k = 1, []), cb = arguments[_k++];
              return async.map(tag.rows, function(row, cb) {
                var sql;

                sql = 'INSERT INTO `mp_tags_gallery` (`tr_object_id`,`tr_object_type`,`tr_tag_id`, `tr_uid`,`tr_tag_type`)\nVALUES (?,\'\',?,0,1)';
                return conn.query(sql, [row, q.insertId], cb);
              }, cb);
            }
          ], cb);
        }, cb);
        return cb();
      });
    }
  ], _cb);
};

fetch(1, conn, function(err) {
  console.dir(arguments);
  return console.log('Completed.');
});
