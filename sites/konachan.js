// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var CONFIG, conn, criterion, gate, iced, jomap, make_esc, mohair, mysql, request, run, s, t, _, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  request = require('request');

  mysql = require('mysql');

  _ = require('underscore');

  gate = require('gate');

  mohair = require('mohair');

  criterion = require('criterion');

  jomap = require('jomap');

  s = require('searchjs');

  t = require('tracer').console({
    format: '{{timestamp}} Konachan:<{{title}}> {{message}}'
  });

  make_esc = require('iced-error').make_esc;

  CONFIG = JSON.parse(require('fs').readFileSync('config.json').toString());

  conn = mysql.createConnection(CONFIG.mysql_dev);

  run = function(gcb) {
    var already, assocTable, e, esc, g, galleryTable, i, id, idsExist, item, items, key, needInsert, options, params, q, query, r, rep, result, resultNames, results, row, stats, tag, tagTable, tags, val, ___iced_passed_deferral, __iced_deferrals, __iced_k, _query, _tags,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    esc = make_esc(gcb);
    t.info('Starting');
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "D:\iced_moefou\sites\konachan.iced",
        funcname: "run"
      });
      request({
        url: 'http://konachan.com/post.json',
        qs: {
          limit: 40,
          page: 1
        }
      }, esc(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return rep = arguments[0];
          };
        })(),
        lineno: 23
      })));
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _len;
      if (rep.statusCode !== 200) {
        return gcb(new Error("#" + rep.statusCode + ":Request to konachan is not success."));
      }
      items = [];
      stats = {};
      try {
        items = JSON.parse(rep.body);
      } catch (_error) {
        e = _error;
        return gcb(new Error("Failed to parse JSON:" + (e.toString())));
      }
      t.info('JSON data parsed. %d objects received. Starting to build query for checking existent.', items.length);
      stats.itemsReceived = items.length;
      q = 'SELECT gallery_site_id FROM mp_gallery WHERE (';
      params = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        q += "(" + (criterion({
          gallery_site_id: item.id,
          gallery_rating: item.rating
        }).sql()) + ") OR ";
        params.push(item.id);
        params.push(item.rating);
      }
      q = q.slice(0, -4);
      q += ") AND gallery_site = 'konachan'";
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "D:\iced_moefou\sites\konachan.iced",
          funcname: "run"
        });
        conn.query(q, params, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return results = arguments[0];
            };
          })(),
          lineno: 48
        })));
        __iced_deferrals._fulfill();
      })(function() {
        var _j, _len1;
        idsExist = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
            i = results[_j];
            _results.push(i.gallery_site_id);
          }
          return _results;
        })();
        items = items.filter(function(item) {
          var _ref;
          return _ref = item.id, __indexOf.call(idsExist, _ref) < 0;
        });
        t.info('Existent checking success. %d item(s) need to insert.', items.length);
        stats.itemsInserted = items.length;
        if (items.length === 0) {
          return gcb(null, stats);
        }
        options = {
          map: {
            width: 'gallery_width',
            height: 'gallery_height',
            file_url: 'gallery_file_url',
            sample_url: 'gallery_sample_url',
            preview_url: 'gallery_preview_url',
            source: 'gallery_source',
            file_size: 'gallery_file_size',
            rating: 'gallery_rating',
            md5: 'gallery_md5',
            id: 'gallery_site_id'
          }
        };
        galleryTable = mohair.table('mp_gallery');
        g = gate.create();
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          query = galleryTable.insert(_.extend(jomap.map(item, options), {
            gallery_date: Math.round(new Date().getTime() / 1000),
            gallery_site: 'konachan'
          }));
          item.tags = item.tags.split(/\s/g);
          conn.query(query.sql(), query.params(), g.latch({
            result: 1,
            item: g.val(item)
          }));
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "D:\iced_moefou\sites\konachan.iced",
            funcname: "run"
          });
          g.await(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                results = arguments[0];
                return g = arguments[1];
              };
            })(),
            lineno: 78
          })));
          __iced_deferrals._fulfill();
        })(function() {
          var _k, _l, _len2, _len3, _ref;
          items = _.map(results, function(item) {
            return _.extend(item.item, {
              row: item.result.insertId
            });
          });
          _tags = {};
          for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
            item = items[_k];
            _ref = item.tags;
            for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
              tag = _ref[_l];
              if (_tags[tag] == null) {
                _tags[tag] = [];
              }
              _tags[tag].push(item.row);
            }
          }
          tags = (function() {
            var _results;
            _results = [];
            for (key in _tags) {
              val = _tags[key];
              _results.push({
                name: key,
                rows: val
              });
            }
            return _results;
          })();
          tagTable = mohair.table('mp_tags');
          params = [];
          query = (function() {
            var _len4, _m, _results;
            _results = [];
            for (_m = 0, _len4 = tags.length; _m < _len4; _m++) {
              tag = tags[_m];
              q = tagTable.select('tag_eng_name,tag_id').where({
                tag_eng_name: tag.name
              });
              params.push(q.params()[0]);
              _results.push(q.sql());
            }
            return _results;
          })();
          query = query.join(' UNION ALL ');
          t.info('Tag existent query starting.');
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "D:\iced_moefou\sites\konachan.iced",
              funcname: "run"
            });
            conn.query(query, params, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return result = arguments[0];
                };
              })(),
              lineno: 99
            })));
            __iced_deferrals._fulfill();
          })(function() {
            var _len4, _m;
            resultNames = (function() {
              var _len4, _m, _results;
              _results = [];
              for (_m = 0, _len4 = result.length; _m < _len4; _m++) {
                r = result[_m];
                _results.push(r.tag_eng_name);
              }
              return _results;
            })();
            already = s.matchArray(tags, {
              name: resultNames
            });
            needInsert = s.matchArray(tags, {
              _not: true,
              name: resultNames
            });
            stats.tags_affected = needInsert.length;
            t.info('%d tag(s) need to insert.', needInsert.length);
            already = (function() {
              var _len4, _m, _results;
              _results = [];
              for (_m = 0, _len4 = already.length; _m < _len4; _m++) {
                tag = already[_m];
                id = s.matchArray(result, {
                  tag_eng_name: tag.name
                })[0].tag_id;
                tag.id = id;
                _results.push(tag);
              }
              return _results;
            })();
            for (_m = 0, _len4 = needInsert.length; _m < _len4; _m++) {
              tag = needInsert[_m];
              q = tagTable.insert({
                tag_chn_name: '',
                tag_eng_name: tag.name,
                tag_jpn_name: '',
                tag_modified: Math.round(new Date().getTime() / 1000)
              });
              conn.query(q.sql(), q.params(), g.latch({
                result: 1,
                row: g.val(tag.rows)
              }));
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "D:\iced_moefou\sites\konachan.iced",
                funcname: "run"
              });
              g.await(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return results = arguments[0];
                  };
                })(),
                lineno: 119
              })));
              __iced_deferrals._fulfill();
            })(function() {
              var _len5, _len6, _n, _o, _ref1;
              results = _.map(results, function(data) {
                return {
                  id: data.result.insertId,
                  rows: data.row
                };
              });
              results = results.concat(already);
              assocTable = mohair.table('mp_tags_gallery');
              _query = [];
              for (_n = 0, _len5 = results.length; _n < _len5; _n++) {
                tag = results[_n];
                _ref1 = tag.rows;
                for (_o = 0, _len6 = _ref1.length; _o < _len6; _o++) {
                  row = _ref1[_o];
                  _query.push({
                    tr_object_id: row,
                    tr_object_type: '',
                    tr_tag_id: tag.id,
                    tr_uid: 0,
                    tr_tag_type: 1
                  });
                }
              }
              query = assocTable.insertMany(_query);
              t.info('%d association(s) need to insert.', _query.length);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "D:\iced_moefou\sites\konachan.iced",
                  funcname: "run"
                });
                conn.query(query.sql(), query.params(), esc(__iced_deferrals.defer({
                  lineno: 140
                })));
                __iced_deferrals._fulfill();
              })(function() {
                t.info('All opreation succeed.');
                return gcb(null);
              });
            });
          });
        });
      });
    });
  };

}).call(this);
